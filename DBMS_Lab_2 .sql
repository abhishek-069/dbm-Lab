CREATE TABLE SALESMAN(SALESMAN_ID INT PRIMARY KEY,NAME VARCHAR(20), CITY VARCHAR(20), COMMISSION VARCHAR(20));

CREATE TABLE CUSTOMER(CUSTOMER_ID INT PRIMARY KEY,CUSTOMER_NAME VARCHAR(20), CITY VARCHAR(20), GRADE INT , SALESMAN_ID REFERENCES SALESMAN (SALESMAN_ID) ON DELETE SET NULL);

CREATE TABLE ORDERS(ORD_ID INT PRIMARY KEY, PURCHASE_AMT NUMBER , ORD_DATE DATE, CUSTOMER_ID REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE SET NULL, SALESMAN_ID REFERENCES SALESMAN(SALESMAN_ID) ON DELETE SET NULL);

INSERT INTO SALESMAN VALUES (1000, 'JOHN', 'BANGALORE', '25%');
INSERT INTO SALESMAN VALUES (2000, 'RAVI', 'BANGALORE', '20%');
INSERT INTO SALESMAN VALUES (3000, 'KUMAR', 'MYSURU', '15%');
INSERT INTO SALESMAN VALUES (4000, 'SMITH', 'DELHI', '30%');
INSERT INTO SALESMAN VALUES (5000, 'HARSHA', 'HYDERBAD', '15%');


INSERT INTO CUSTOMER VALUES (10, 'PREETHI', 'BANGALORE', 100, 1000);
INSERT INTO CUSTOMER VALUES (11, 'VIVEK', 'MANGALORE', 300, 1000);
INSERT INTO CUSTOMER VALUES (12, 'BHASKAR', 'CHENNAI', 400, 2000);
INSERT INTO CUSTOMER VALUES (13, 'CHETHAN', 'BENGALORE', 200, 2000);
INSERT INTO CUSTOMER VALUES (14, 'MAMATHA', 'BENGALORE', 400, 3000);


INSERT INTO ORDERS VALUES (50, 5000, '04-MAY-17', 10, 1000);
INSERT INTO ORDERS VALUES (51, 450, '20-JAN-17', 10, 1000);
INSERT INTO ORDERS VALUES (52, 1000, '20-JAN-17', 13, 2000);
INSERT INTO ORDERS VALUES (53, 3500, '13-APR-17', 14, 3000);
INSERT INTO ORDERS VALUES (54, 550, '09-MAR-17', 12, 2000);

COMMIT;


SELECT * FROM SALESMAN;
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;


a. SELECT COUNT(*) FROM CUSTOMER WHERE GRADE > (SELECT AVG(GRADE) FROM CUSTOMER WHERE CITY = 'BANGALORE');

b. SELECT S.SALESMAN_ID, S.NAME FROM SALESMAN S WHERE 1 < (SELECT COUNT(*) FROM CUSTOMER C WHERE C.SALESMAN_ID = S.SALESMAN_ID);

c. SELECT S.SALESMAN_ID, S.NAME, C.CUSTOMER_NAME, S.COMMISSION FROM SALESMAN S JOIN CUSTOMER C ON S.CITY = C.CITY UNION SELECT S.SALESMAN_ID, S.NAME, 'NO_MATCH' AS CUSTOMER_NAME, S.COMMISSION FROM SALESMAN S WHERE S.CITY NOT IN (SELECT CITY FROM CUSTOMER);

d. CREATE VIEW E_SALESMAN AS SELECT B.ORD_DATE, A.SALESMAN_ID, A.NAME FROM SALESMAN A JOIN ORDERS B ON A.SALESMAN_ID = B.SALESMAN_ID WHERE B.PURCHASE_AMT = (SELECT MAX(PURCHASE_AMT)FROM ORDERS C WHERE C.ORD_DATE = B.ORD_DATE);

SELECT * FROM E_SALESMAN;

e. DELETE FROM SALESMAN WHERE SALESMAN_ID=1000;

SELECT * FROM SALESMAN;
SELECT * FROM CUSTOMER;
SELECT * FROM ORDERS;


1.  SELECT GRADE, COUNT (DISTINCT CUSTOMER_ID) FROM 
CUSTOMER 
GROUP BY GRADE 
HAVING GRADE > (SELECT AVG(GRADE) 
FROM CUSTOMER 
WHERE CITY='BANGALORE'); 


2.  SELECT SALESMAN_ID, NAME FROM 
SALESMAN A 
WHERE 1 < (SELECT COUNT (*) FROM 
CUSTOMER 
WHERE SALESMAN_ID=A.SALESMAN_ID); 



3.  SELECT SALESMAN.SALESMAN_ID, NAME, CUSTOMER_NAME, COMMISSION FROM 
SALESMAN, CUSTOMER
WHERE SALESMAN.CITY = CUSTOMER.CITY 
UNION 
SELECT SALESMAN_ID, NAME, 'NO MATCH', COMMISSION 
FROM SALESMAN 
WHERE NOT CITY = ANY 
(SELECT CITY 
FROM CUSTOMER) 
ORDER BY 2 DESC; 


 (CREATE OR REPLACE TRIGGER prevent_delete  
BEFORE DELETE ON employees  
FOR EACH ROW  
BEGIN  
    RAISE_APPLICATION_ERROR(-20001, 'Row can''t be deleted');  
END;  
/)




# EXTRA QUIERES FOR ORDER DATABASE

1. Find the Average Purchase Amount for Each City

SELECT C.CITY, AVG(O.PURCHASE_AMT) AS AVG_PURCHASE  
FROM CUSTOMER C  
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID  
GROUP BY C.CITY  
ORDER BY AVG_PURCHASE DESC;


2. Find the City with the Maximum Total Sales

SELECT C.CITY, SUM(O.PURCHASE_AMT) AS TOTAL_SALES  
FROM CUSTOMER C  
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID  
GROUP BY C.CITY  
ORDER BY TOTAL_SALES DESC  
FETCH FIRST 1 ROWS ONLY;


3. Find the Salesman Who Has the Most Customers

SELECT S.SALESMAN_ID, S.NAME, COUNT(C.CUSTOMER_ID) AS TOTAL_CUSTOMERS  
FROM SALESMAN S  
LEFT JOIN CUSTOMER C ON S.SALESMAN_ID = C.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME  
ORDER BY TOTAL_CUSTOMERS DESC  
FETCH FIRST 1 ROWS ONLY;


4. Find the Oldest and Newest Order Dates

SELECT MIN(ORD_DATE) AS OLDEST_ORDER, MAX(ORD_DATE) AS NEWEST_ORDER  
FROM ORDERS;


5. Find Salesmen Who Have Not Made Any Sales

SELECT S.SALESMAN_ID, S.NAME  
FROM SALESMAN S  
LEFT JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID  
WHERE O.ORD_ID IS NULL;

6. Find the Most Expensive Order and Its Customer

SELECT O.ORD_ID, O.PURCHASE_AMT, C.CUSTOMER_NAME  
FROM ORDERS O  
JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID  
WHERE O.PURCHASE_AMT = (SELECT MAX(PURCHASE_AMT) FROM ORDERS);


7. Find Salesmen with More Than One Customer

SELECT S.SALESMAN_ID, S.NAME, COUNT(C.CUSTOMER_ID) AS CUSTOMER_COUNT  
FROM SALESMAN S  
JOIN CUSTOMER C ON S.SALESMAN_ID = C.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME  
HAVING COUNT(C.CUSTOMER_ID) > 1;

8. Get the Average Commission of Salesmen per City

SELECT CITY, AVG(CAST(REPLACE(COMMISSION, '%', '') AS FLOAT)) AS AVG_COMMISSION  
FROM SALESMAN  
GROUP BY CITY  
ORDER BY AVG_COMMISSION DESC;

9. Create a View of High-Performing Salesmen

CREATE VIEW HIGH_PERFORMERS AS  
SELECT S.SALESMAN_ID, S.NAME, COUNT(O.ORD_ID) AS TOTAL_ORDERS, SUM(O.PURCHASE_AMT) AS TOTAL_SALES  
FROM SALESMAN S  
JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME  
HAVING SUM(O.PURCHASE_AMT) > (SELECT AVG(PURCHASE_AMT) FROM ORDERS);


10. Find Customers Who Made Purchases in Multiple Cities

SELECT CUSTOMER_ID, CUSTOMER_NAME, COUNT(DISTINCT CITY) AS UNIQUE_CITIES  
FROM CUSTOMER  
GROUP BY CUSTOMER_ID, CUSTOMER_NAME  
HAVING COUNT(DISTINCT CITY) > 1;

11. Find the Salesman Who Sold the Most in a Single Order

SELECT S.SALESMAN_ID, S.NAME, MAX(O.PURCHASE_AMT) AS HIGHEST_SALE  
FROM SALESMAN S  
JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME  
ORDER BY HIGHEST_SALE DESC  
FETCH FIRST 1 ROWS ONLY;


12. Rank Salesmen Based on Their Total Sales

SELECT S.SALESMAN_ID, S.NAME, SUM(O.PURCHASE_AMT) AS TOTAL_SALES,  
RANK() OVER (ORDER BY SUM(O.PURCHASE_AMT) DESC) AS SALES_RANK  
FROM SALESMAN S  
JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME;


13. Find Customers Who Have the Same Grade

SELECT C1.CUSTOMER_NAME AS CUSTOMER_1, C2.CUSTOMER_NAME AS CUSTOMER_2, C1.GRADE  
FROM CUSTOMER C1, CUSTOMER C2  
WHERE C1.GRADE = C2.GRADE AND C1.CUSTOMER_ID < C2.CUSTOMER_ID  
ORDER BY C1.GRADE;


14. Find Salesmen Who Have No Customers in Their City

SELECT S.SALESMAN_ID, S.NAME, S.CITY  
FROM SALESMAN S  
WHERE S.CITY NOT IN (SELECT DISTINCT CITY FROM CUSTOMER);


15. Find the Percentage Contribution of Each Salesman to Total Sales

SELECT S.SALESMAN_ID, S.NAME, SUM(O.PURCHASE_AMT) AS TOTAL_SALES,  
ROUND((SUM(O.PURCHASE_AMT) / (SELECT SUM(PURCHASE_AMT) FROM ORDERS)) * 100, 2) AS PERCENTAGE  
FROM SALESMAN S  
JOIN ORDERS O ON S.SALESMAN_ID = O.SALESMAN_ID  
GROUP BY S.SALESMAN_ID, S.NAME  
ORDER BY PERCENTAGE DESC;